{
  "name": "epub",
  "description": "Parse ePub electronic book files with Node.JS",
  "version": "0.1.0",
  "author": {
    "name": "Andris Reinman"
  },
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@node.ee"
    }
  ],
  "homepage": "http://github.com/andris9/epub",
  "repository": {
    "type": "git",
    "url": "http://github.com/andris9/epub.git"
  },
  "main": "./epub",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/andris9/epub/blob/master/LICENSE"
    }
  ],
  "dependencies": {
    "zipfile": "*",
    "xml2js": "*"
  },
  "engine": [
    "node >=0.3.0"
  ],
  "keywords": [
    "epub",
    "books"
  ],
  "readme": "#epub\n\n**epub** is a node.js module to parse EPUB electronic book files.\n\n**NB!** Only ebooks in UTF-8 are currently supported!.\n\n## Installation\n\n    npm install epub\n\n## Usage\n\n\tvar EPub = require(\"epub\");\n    var epub = new EPub(epubfile, imagewebroot, chapterwebroot);\n\nWhere\n\n  * **epubfile** is the file path to an EPUB file\n  * **imagewebroot** is the prefix for image URL's. If it's */images/* then the actual URL (inside chapter HTML `<img>` blocks) is going to be */images/IMG_ID/IMG_FILENAME*, `IMG_ID` can be used to fetch the image form the ebook with `getImage`\n  * **chapterwebroot** is the prefix for chapter URL's. If it's */chapter/* then the actual URL (inside chapter HTML `<a>` links) is going to be */chapters/CHAPTER_ID/CHAPTER_FILENAME*, `CHAPTER_ID` can be used to fetch the image form the ebook with `getChapter`\n \nBefore the contents of the ebook can be read, it must be opened (`EPub` is an `EventEmitter`).\n\n    epub.on(\"end\", function(){\n    \t// epub is now usable\n    \tconsole.log(epub.metadata.title);\n\n    \tepub.getChapter(\"chapter_id\", function(err, text){});\n    });\n    epub.parse();\n\n\n## metadata\n\nProperty of the *epub* object that holds several metadata fields about the book.\n\n    epub = new EPub(...);\n    ...\n    epub.metadata;\n\nAvailable fields:\n\n  * **creator** Author of the book (if multiple authors, then the first on the list) (*Lewis Carroll*)\n  * **creatorFileAs** Author name on file (*Carroll, Lewis*)\n  * **title** Title of the book (*Alice's Adventures in Wonderland*)\n  * **language** Language code (*en* or *en-us* etc.)\n  * **subject** Topic of the book (*Fantasy*)\n  * **date** creation of the file (*2006-08-12*)\n\n## flow\n\n*flow* is a property of the *epub* object and holds the actual list of chapters (TOC is just an indication and can link to a # url inside a chapter file)\n\n    epub = new EPub(...);\n    ...\n    epub.flow.forEach(function(chapter){\n    \tconsole.log(chapter.id);\n    });\n\nChapter `id` is needed to load the chapters `getChapter`\n\n## toc\n*toc* is a property of the *epub* object and indicates a list of titles/urls for the TOC. Actual chapter and it's ID needs to be detected with the `href` property\n\n\n## getChapter(chapter_id, callback)\n\nLoad chapter text from the ebook.\n\n    var epub = new EPub(...);\n    ...\n    epub.getChapter(\"chapter1\", function(error, text){});\n\n## getImage(image_id, callback)\n\nLoad image (as a Buffer value) from the ebook.\n\n    var epub = new EPub(...);\n    ...\n    epub.getImage(\"image1\", function(error, img, mimeType){});\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andris9/epub/issues"
  },
  "_id": "epub@0.1.0",
  "_from": "epub@0.1.0"
}
